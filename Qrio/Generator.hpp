#ifndef GENERATE_HPP
#define GENERATE_HPP

#include <string>
#include <vector>

/*
This class is responsible for generating testimages of qrcodes from ground_truth qrimages located in the source folder.
These are loaded into workingFiles.
The methods given generate a desired amount of files from workingFiles and save them in dest folder.

The maximum amount of images generated by using all methods in succession is given by:
#ground_truth * #scales	* #rotations * #perspectives * #backgroundImages * #blures * #noises
Currently given by: 20 * 3 * 8 * 15 * 10 * 4 * 3
*/

class Generator {
public:
	Generator(const std::string source, const std::string dest);

	/**
	*\brief Adds a border around the workingFiles
	*/
	void border();

	/**
	* \brief Scales workingFiles with the following Interpolationtypes:	INTER_NEAREST, INTER_LINEAR, INTER_AREA	by a given factor.
	* \param scale The value to be scaled with. Must be larger than 1.
	*/
	void scale(float scale);

	/**
	* \brief Rotates the workinFiles discretised in 45° Degree Angles
	* \param desiredFiles The desired amount of generated files. If set to 0 or larger than possible, all possible files are generated.
	* \param degree_step  The discretisation of the angle. Must be in the open Intervall (0 and 360).
	* \param maxDegree The max angle. Must be in the Intervall (0 and 360].
	*/
	void rotate(int desiredFiles, float degree_step, float maxDegree);

	/**
	* \brief Applys perspective Transformations on the workingFile
	* \param desiredFiles The desired amount of generated files. If set to 0 or larger than possible, all possible files are generated.
	* \param step The discretisation of upperleftpoint. Must be in the open Intervall (0 and 0.5). Should be a divisor of maxStep.
	* \param maxStep  The max position of the upperleftPoint. Must be in the open Intervall (0 and 0.5).
	*/
	void perspective(int desiredFiles, float step, float maxStep);

	/**
	* \brief Loads backgroundimages from the folder 99_bg and inserts the workingFiles into these backgroundImages
	* \param desiredFiles The desired amount of generated files. If set to 0 or larger than possible, all possible files are generated.
	* \param qrSize The scale of the QRImage in the backgroundImage. Must be in the open Intervall (0 and 1). If set to 1 the QRImages width and length will be equal to the smallest axis of the backgroundImage.
	* \param maxBgImageScale The max dimension of the backgroundImage. The backgroundImage will be shrinked, if it exceeds this scale.
	*/
	void synthetic(int desiredFiles, float qrSize, float maxBgImageScale);

	/**
	* \brief Applys a Gaussianblur on the workingFiles
	* \param desiredFiles The desired amount of generated files. If set to 0 or larger than possible, all possible files are generated.
	* \param kernelSize_start Start of the Gaussiankernelsize. Must be uneven.
	* \param kernelSize_step Step of the Gaussiankernelsize. Must be even.
	* \param maxkernelSize Maximum size of the kernel. Should be uneven.
	*/
	void blur(int desiredFiles, int kernelSize_start, int kernelSize_step, int maxkernelSize);

	/**
	* \brief Applys noise on the workingFiles
	* \param desiredFiles The desired amount of generated files. If set to 0 or larger than possible, all possible files are generated.
	* \param stdDev_start Startvalue of StandardDeviation.
	* \param stdDev_step Stepvalue of StandardDeviation.
	* \param maxStdDev Maximum value of StandardDeviation.
	*/
	void noise(int desiredFiles, float stdDev_start, float stdDev_step, float maxStdDev);

private:
	std::string source;
	std::string dest;
	std::vector<std::string> workingFiles;
	std::vector<std::string> bgFiles;

	/**
	* \brief Shuffles the workingFiles. Is needed while generating images, to avoid non-random behaviour when only having a few desired files.
	*/
	void shuffle();
};


#endif // GENERATE_HPP
